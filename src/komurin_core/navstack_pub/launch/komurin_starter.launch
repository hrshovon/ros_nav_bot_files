<launch>
	<!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
  	<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 0 0 0 base_link laser 30" />
  	<node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 30" />
  	<node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 30" />
  	<!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  	<!-- map to odom will be provided by the AMCL -->
  	<node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />
	<!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
  	<!-- Used for obstacle avoidance and can be used for mapping --> 
  	<!-- Publish: /scan -->
  	<node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    		<param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
    		<param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->    	
    		#<param name="frame_id"            type="string" value="laser"/>
    		#<param name="inverted"            type="bool"   value="false"/>
    		#<param name="angle_compensate"    type="bool"   value="true"/>
  	</node>  
	<!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino -->  
  	<!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
  	<!-- Subscribe: /cmd_vel -->
  	<!-- Publish: /right_ticks, /left_ticks -->
  	<node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    		<param name="port" value="/dev/ttyACM0"/>
    		<param name="baud" value="115200"/>
  	</node>
	<!-- mpu6050 imu publisher  -->
	<node name="imu_node" pkg="mpu_6050_driver" type="imu_node.py" respawn="true" respawn_delay="2" />
	<node name="tf_broadcaster_imu" pkg="mpu_6050_driver" type="tf_broadcaster_imu.py" respawn="true" respawn_delay="2" />  	
</launch>
