<launch>
	<!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
  	<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 0 0 0 base_link laser 30" />
  	<node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 30" />
  	<node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 30" />
  	<!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  	<!-- map to odom will be provided by the AMCL -->
  	<node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />
	<!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
  	<!-- Used for obstacle avoidance and can be used for mapping --> 
  	<!-- Publish: /scan -->
  	<node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    		<param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
    		<param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->    	
    		#<param name="frame_id"            type="string" value="laser"/>
    		#<param name="inverted"            type="bool"   value="false"/>
    		#<param name="angle_compensate"    type="bool"   value="true"/>
  	</node>  
	<!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino -->  
  	<!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
  	<!-- Subscribe: /cmd_vel -->
  	<!-- Publish: /right_ticks, /left_ticks -->
  	<node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    		<param name="port" value="/dev/ttyACM0"/>
    		<param name="baud" value="115200"/>
  	</node>
	<!-- mpu6050 imu publisher  -->
	<node name="imu_node" pkg="mpu_6050_driver" type="imu_node.py" respawn="true" respawn_delay="2" />
	<node name="tf_broadcaster_imu" pkg="mpu_6050_driver" type="tf_broadcaster_imu.py" respawn="true" respawn_delay="2" />  	
	<!-- odometry data publisher -->
	<node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub">
  	</node> 
	<!-- Extended Kalman Filter from robot_pose_ekf Node-->
  	<!-- Subscribe: /odom, /imu_data, /vo -->
  	<!-- Publish: /robot_pose_ekf/odom_combined -->
  	<remap from="odom" to="odom_data_quat" />
  	<remap from="imu_data" to="imu/data" />
  	<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    		<param name="output_frame" value="odom"/>
    		<param name="base_footprint_frame" value="base_footprint"/>
    		<param name="freq" value="30.0"/>
    		<param name="sensor_timeout" value="1.0"/>
    		<param name="odom_used" value="true"/>
    		<param name="imu_used" value="true"/>
    		<param name="vo_used" value="false"/>
    		<param name="gps_used" value="false"/>
    		<param name="debug" value="false"/>
    		<param name="self_diagnose" value="false"/>
  	</node>
	
  	<!-- Initial Pose and Goal Publisher -->
  	<!-- Publish: /initialpose, /move_base_simple/goal -->
  	<node pkg="rviz" type="rviz" name="rviz" args="-d /home/automaticaddison/catkin_ws/src/jetson_nano_bot/navigation_data_pub/maps/floorplan4.rviz">
  	</node> 

  	<!-- Subscribe: /initialpose, /move_base_simple/goal -->
  	<!-- Publish: /initial_2d, /goal_2d --> 
  	<node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
  	</node>   
</launch>
